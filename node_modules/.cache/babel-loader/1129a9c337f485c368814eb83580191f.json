{"ast":null,"code":"var _jsxFileName = \"/Users/lucamilletti/Desktop/CodeCademy/Appointment Planner/src/containers/appointmentsPage/AppointmentsPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AppointmentsPage = props => {\n  _s();\n\n  const {\n    appointmentList,\n    contacts,\n    addAppointment\n  } = props;\n  const [title, setTitle] = useState();\n  const [contact, setContact] = useState();\n  const [date, setDate] = useState();\n  const [time, setTime] = useState();\n  /*\r\n  Define state variables for \r\n  appointment info\r\n  */\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    /*\r\n    Add contact info and clear data  \r\n    */\n\n    const handleSubmit = e => {\n      e.preventDefault();\n      /*\r\n      Add contact info and clear data\r\n      if the contact name is not a duplicate\r\n      */\n\n      console.log(`Name: ${name}`);\n      duplicateCheck();\n      console.log(\"Value of duplicate name: \" + duplicateName);\n\n      if (!duplicateName) {\n        //if duplicate name is set to true, addContact\n        addContact(name, phone, email);\n        setName('');\n        setPhone('');\n        setEmail('');\n      } else {\n        //alert(\"Please Enter A different name!\");\n        setName('');\n        setPhone('');\n        setEmail('');\n      }\n    };\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add Appointment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Appointments\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AppointmentsPage, \"d+fYYn1MFj0EayLPSS9hPBgUB3A=\");\n\n_c = AppointmentsPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppointmentsPage\");","map":{"version":3,"sources":["/Users/lucamilletti/Desktop/CodeCademy/Appointment Planner/src/containers/appointmentsPage/AppointmentsPage.js"],"names":["React","useState","AppointmentsPage","props","appointmentList","contacts","addAppointment","title","setTitle","contact","setContact","date","setDate","time","setTime","handleSubmit","e","preventDefault","console","log","name","duplicateCheck","duplicateName","addContact","phone","email","setName","setPhone","setEmail"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;;AAEA,OAAO,MAAMC,gBAAgB,GAAIC,KAAD,IAAW;AAAA;;AACzC,QAAM;AAACC,IAAAA,eAAD;AAAkBC,IAAAA,QAAlB;AAA4BC,IAAAA;AAA5B,MAA8CH,KAApD;AACA,QAAM,CAACI,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,EAAlC;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,EAAtC;AACA,QAAM,CAACU,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,EAAhC;AACA,QAAM,CAACY,IAAD,EAAOC,OAAP,IAAkBb,QAAQ,EAAhC;AAGA;AACF;AACA;AACA;;AAEE,QAAMc,YAAY,GAAIC,CAAD,IAAO;AAC1BA,IAAAA,CAAC,CAACC,cAAF;AACA;AACJ;AACA;;AAAM,UAAMF,YAAY,GAAIC,CAAD,IAAO;AAC9BA,MAAAA,CAAC,CAACC,cAAF;AACA;AACJ;AACA;AACA;;AACGC,MAAAA,OAAO,CAACC,GAAR,CAAa,SAAQC,IAAK,EAA1B;AACAC,MAAAA,cAAc;AACdH,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAA4BG,aAAxC;;AACC,UAAG,CAACA,aAAJ,EAAkB;AAAE;AAClBC,QAAAA,UAAU,CAACH,IAAD,EAAMI,KAAN,EAAYC,KAAZ,CAAV;AACAC,QAAAA,OAAO,CAAC,EAAD,CAAP;AACAC,QAAAA,QAAQ,CAAC,EAAD,CAAR;AACAC,QAAAA,QAAQ,CAAC,EAAD,CAAR;AACD,OALD,MAMI;AACF;AACAF,QAAAA,OAAO,CAAC,EAAD,CAAP;AACAC,QAAAA,QAAQ,CAAC,EAAD,CAAR;AACAC,QAAAA,QAAQ,CAAC,EAAD,CAAR;AACD;AACF,KArBG;AAuBH,GA3BD;;AA6BA,sBACE;AAAA,4BACE;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAA;AAAA;AAAA;AAAA,YAJF,eAKE;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CArDM;;GAAM1B,gB;;KAAAA,gB","sourcesContent":["import React, {useState} from \"react\";\r\n\r\nexport const AppointmentsPage = (props) => {\r\n  const {appointmentList, contacts, addAppointment} = props;\r\n  const [title, setTitle] = useState();\r\n  const [contact, setContact] = useState();\r\n  const [date, setDate] = useState();\r\n  const [time, setTime] = useState();\r\n\r\n\r\n  /*\r\n  Define state variables for \r\n  appointment info\r\n  */\r\n  \r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    /*\r\n    Add contact info and clear data  \r\n    */const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\r\n   console.log(`Name: ${name}`);\r\n   duplicateCheck();\r\n   console.log(\"Value of duplicate name: \"+duplicateName);\r\n    if(!duplicateName){ //if duplicate name is set to true, addContact\r\n      addContact(name,phone,email);\r\n      setName('');\r\n      setPhone('');\r\n      setEmail('');\r\n    }\r\n    else{\r\n      //alert(\"Please Enter A different name!\");\r\n      setName('');\r\n      setPhone('');\r\n      setEmail('');\r\n    }\r\n  };\r\n   \r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>Add Appointment</h2>\r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Appointments</h2>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}