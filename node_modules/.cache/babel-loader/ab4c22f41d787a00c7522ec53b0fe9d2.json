{"ast":null,"code":"var _jsxFileName = \"/Users/lucamilletti/Desktop/CodeCademy/Appointment Planner/src/containers/contactsPage/ContactsPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { ContactForm } from '../../components/contactForm/ContactForm';\nimport { TileList } from \"../../components/tileList/TileList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContactsPage = props => {\n  _s();\n\n  const {\n    contacts,\n    setContacts,\n    addContact\n  } = props;\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\n\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n  const [email, setEmail] = useState('');\n  const [duplicateName, setDuplicateName] = useState(false);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\n\n    duplicateCheck();\n\n    if (duplicateName) {\n      addContact(name, phone, email);\n      setName('');\n      setPhone('');\n      setEmail('');\n    } else {\n      alert(\"Please Enter A different name!\");\n      setName('');\n      setPhone('');\n      setEmail('');\n    }\n  };\n\n  const duplicateCheck = () => {\n    if (contacts.find(contact => contact.name === name) === undefined) {\n      return false; //if the contacts.find is empty, return false\n    } else return true;\n  };\n\n  useEffect(() => {\n    if (!duplicateCheck) setDuplicateName(false); //if the contacts/find is empty, return false and no duplicate name\n    else setDuplicateName(true);\n  }, [name, contacts, duplicateName]);\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ContactForm, {\n        name: name,\n        setName: setName,\n        phone: phone,\n        setPhone: setPhone,\n        email: email,\n        setEmail: setEmail,\n        handleSubmit: handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TileList, {\n        tiles: contacts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContactsPage, \"z7Ej7viefb9vIQ4/MjbB7RbJeic=\");\n\n_c = ContactsPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactsPage\");","map":{"version":3,"sources":["/Users/lucamilletti/Desktop/CodeCademy/Appointment Planner/src/containers/contactsPage/ContactsPage.js"],"names":["React","useState","useEffect","ContactForm","TileList","ContactsPage","props","contacts","setContacts","addContact","name","setName","phone","setPhone","email","setEmail","duplicateName","setDuplicateName","handleSubmit","e","preventDefault","duplicateCheck","alert","find","contact","undefined"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAwBC,SAAxB,QAAwC,OAAxC;AACA,SAASC,WAAT,QAA4B,0CAA5B;AACA,SAASC,QAAT,QAAyB,oCAAzB;;AAEA,OAAO,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAAA;;AACrC,QAAM;AAACC,IAAAA,QAAD;AAAWC,IAAAA,WAAX;AAAwBC,IAAAA;AAAxB,MAAsCH,KAA5C;AACA;AACF;AACA;AACA;;AACE,QAAM,CAACI,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACa,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACe,aAAD,EAAgBC,gBAAhB,IAAoChB,QAAQ,CAAC,KAAD,CAAlD;;AACA,QAAMiB,YAAY,GAAIC,CAAD,IAAO;AAE1BA,IAAAA,CAAC,CAACC,cAAF;AACA;AACJ;AACA;AACA;;AACGC,IAAAA,cAAc;;AACb,QAAGL,aAAH,EAAiB;AACfP,MAAAA,UAAU,CAACC,IAAD,EAAME,KAAN,EAAYE,KAAZ,CAAV;AACAH,MAAAA,OAAO,CAAC,EAAD,CAAP;AACAE,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACAE,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACD,KALD,MAMI;AACFO,MAAAA,KAAK,CAAC,gCAAD,CAAL;AACAX,MAAAA,OAAO,CAAC,EAAD,CAAP;AACAE,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACAE,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACD;AACF,GApBD;;AAsBA,QAAMM,cAAc,GAAG,MAAM;AAC3B,QAAGd,QAAQ,CAACgB,IAAT,CAAeC,OAAD,IAAYA,OAAO,CAACd,IAAR,KAAiBA,IAA3C,MAAqDe,SAAxD,EAAkE;AAChE,aAAO,KAAP,CADgE,CAClD;AACf,KAFD,MAEM,OAAO,IAAP;AACP,GAJD;;AAKAvB,EAAAA,SAAS,CAAC,MAAI;AACZ,QAAG,CAACmB,cAAJ,EAAoBJ,gBAAgB,CAAC,KAAD,CAAhB,CAApB,CAA6C;AAA7C,SACKA,gBAAgB,CAAC,IAAD,CAAhB;AAEN,GAJQ,EAIN,CAACP,IAAD,EAAOH,QAAP,EAAiBS,aAAjB,CAJM,CAAT;AAKA;AACF;AACA;AACA;;AAEE,sBACE;AAAA,4BACE;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,WAAD;AACE,QAAA,IAAI,EAAEN,IADR;AAEE,QAAA,OAAO,EAAEC,OAFX;AAGE,QAAA,KAAK,EAAEC,KAHT;AAIE,QAAA,QAAQ,EAAEC,QAJZ;AAKE,QAAA,KAAK,EAAEC,KALT;AAME,QAAA,QAAQ,EAAEC,QANZ;AAOE,QAAA,YAAY,EAAEG;AAPhB;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAaE;AAAA;AAAA;AAAA;AAAA,YAbF,eAcE;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,QAAD;AACE,QAAA,KAAK,EAAEX;AADT;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAdF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAuBD,CAtEM;;GAAMF,Y;;KAAAA,Y","sourcesContent":["import React, {useState,useEffect} from \"react\";\r\nimport { ContactForm } from '../../components/contactForm/ContactForm';\r\nimport { TileList } from \"../../components/tileList/TileList\";\r\n\r\nexport const ContactsPage = (props) => {\r\n  const {contacts, setContacts, addContact} = props;\r\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\r\n  const [name, setName] = useState('');\r\n  const [phone, setPhone] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [duplicateName, setDuplicateName] = useState(false);\r\n  const handleSubmit = (e) => {\r\n    \r\n    e.preventDefault();\r\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\r\n   duplicateCheck();\r\n    if(duplicateName){\r\n      addContact(name,phone,email);\r\n      setName('');\r\n      setPhone('');\r\n      setEmail('');\r\n    }\r\n    else{\r\n      alert(\"Please Enter A different name!\");\r\n      setName('');\r\n      setPhone('');\r\n      setEmail('');\r\n    }\r\n  };\r\n  \r\n  const duplicateCheck = () => {\r\n    if(contacts.find((contact)=> contact.name === name) === undefined){\r\n      return false; //if the contacts.find is empty, return false\r\n    }else return true;\r\n  }\r\n  useEffect(()=>{\r\n    if(!duplicateCheck) setDuplicateName(false); //if the contacts/find is empty, return false and no duplicate name\r\n    else setDuplicateName(true);\r\n\r\n  }, [name, contacts, duplicateName]);\r\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\r\n\r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>Add Contact</h2> \r\n        <ContactForm \r\n          name={name}\r\n          setName={setName}\r\n          phone={phone}\r\n          setPhone={setPhone}\r\n          email={email}\r\n          setEmail={setEmail}\r\n          handleSubmit={handleSubmit}\r\n        />\r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Contacts</h2>\r\n        <TileList \r\n          tiles={contacts}\r\n        />\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}